#Application Configuration
spring.application.name=Cryptolly
server.port=8888

# DataSource Configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/CryptollyDB
spring.datasource.username=postgres
spring.datasource.password=lfsmodslife
spring.datasource.driver-class-name=org.postgresql.Driver

# Hibernate properties
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

# JWT Configuration
##Google OAuth2 Configuration
#spring.security.oauth2.client.registration.google.provider=my-auth-server
#spring.security.oauth2.client.registration.google.client-id=my-client-id
#spring.security.oauth2.client.registration.google.client-secret=my-client-secret
#spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
#spring.security.oauth2.client.registration.google.scope=message.read,message.write
#
#spring.security.oauth2.client.provider.google.issuer-uri=https://my-auth-server.com
#
#google.redirect.uri=http://localhost:8888/oauth2/callback/google
#
##Oauth2 Resource Server Configuration
#logging.level.org.springframework.security=trace
#
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.client-id=oidc-client
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.client-secret={noop}secret
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.client-authentication-methods[0]=client_secret_basic
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.authorization-grant-types[0]=authorization_code
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.authorization-grant-types[1]=refresh_token
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.redirect-uris[0]=http://127.0.0.1:8080/login/oauth2/code/oidc-client
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.post-logout-redirect-uris[0]=http://127.0.0.1:8080/
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.scopes[0]=openid
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.scopes[1]=profile
#spring.security.oauth2.authorizationserver.client.oidc-client.require-authorization-consent=true


#JwtDecoder
spring.security.oauth2.resourceserver.jwt.issuer-uri=https://my-auth-server.com



